// true
// true
// true
/**/
/*
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
29\.1(00000000000001)?
29\.(2|199999999999999)
29\.3(00000000000001)?
29\.(4|399999999999999)
29\.5
29\.6(00000000000001)?
29.7
29.8
29.9
29.91
29.92
29.93
30
31
32
33
34
36
37
38
39
40
41
42
43
44
*/

program {
    var a: int = 1;
    var t: bool = true;
    record b(b1: int, b2: int, b3: int);
    array c[0:1]: int;
    record d(d1: int);
    proc add(a: int, b: int) {
        var x: int = a + b;
        output x;
    }
    func add2(a: int, b: int): int {
        a + b
    }
    
    // assign
    valof: ref int {
        own x: int = 1;
        a = x;
        return ref a;
    } = valof: int { own x: int = 0; return x; };
    output a;


    // output
    output valof: int {
        own x: int = 1;
        return x;
    };

    // proc
    (valof: bool {
        own x: bool = true;
        return x;
    } ? add : add)(valof: int { own x: int = 1; return x; }, valof: int { own x: int = 1; return x; });

    // if
    if(valof: bool { own x: bool = true; return x; }) {
        a = valof: int { own x: int = 3; return x; };
        output a;
    } else {
        a = valof: int { own x: int = 1; return x; };
    }
    if(valof: bool { own x: bool = false; return x; }) {
        a = valof: int { own x: int = 1; return x; };
    } else {
        a = valof: int { own x: int = 4; return x; };
        output a;
    }

    // while
    while (valof: bool { own x: bool = true; x = t; return x; }) {
        t = valof: bool { own x: bool = false; return x; };
        output 5;
    }

    // repeat
    t = true;
    repeat {
        t = !t;
        output valof: bool { own x: bool = true; x = t; return x; } ? 7 : 6;
    } until (valof: bool { own x: bool = false; x = t; return x; })

    // for
    for (a = valof: int { own x: int = 1; return x; },valof: int { own x: int = 2; return x; } step valof: int { own x: int = 1; return x; } until valof: int { own x: int = 4; return x; },valof: int { own x: int = 5; return x; } while valof: bool { own x: int = 1; x = a; return x == 4; }) {
        output a + valof: int { own x: int = 7; return x; };
    }

    // block
    {
        var x: int = valof: int { own x: int = 13; return x; };
        output valof: int { own y: int = 6; y = x; return y; };
    }

    // trap
    trap {
        var a: int = valof: int { own x: int = 14; return x; };
        output a;
        escapeto f;
f:
        output valof: int { own x: int = 15; return x; };
g:
        output valof: int { own x: int = 17; return x; };
    }

    trap {
        var a: int = valof: int { own x: int = 16; return x; };
        output a;
        escapeto g;
f:
        output valof: int { own x: int = 15; return x; };
g:
        output valof: int { own x: int = 17; return x; };
    }

    // return
    output valof: int { own x: int = 18; return valof: int { own y: int = 1; y = x; return y; }; };

    // with
    b.b1 = 19;
    with valof: record(b1: int, b2: int, b3: int) { own x: record(b1: int, b2: int, b3: int) = record(b1: int, b2: int, b3: int); x = b; return x; } do
        output valof: int { own x: int = 1; x = b1; return x; };

    {
        // const
        const a: int = valof: int { own x: int = 20; return x; };

        // var
        var b: int = valof: int { own x: int = 21; return x; };

        // own
        own c: int = valof: int { own x: int = 22; return x; };

        // array
        array d[valof: int { own x: int = 0; return x; }:valof: int { own x: int = 1; return x; }]: int;

        // proc
        proc e(a: int) {
            output valof: int { own x: int = 0; x = a; return x; };
        }

        // rec proc
        rec proc f(a: int) {
            if (a != 28) {
                output valof: int { own x: int = 0; x = a; return x; };
                e(a + 1);
            }
        }

        // func
        func g(a: int): int {
            valof: int { own x: int = 0; x = a; return x; }
        }

        // rec func
        rec func h(a: int): int {
            valof: int { own x: int = 0; x = a; return x; } == 29 ? 29 : h(a + 1)
        }

        // class
        class T {
            // const
            public const j: float = valof: float { own x: float = 29.1; return x; };

            // var
            public var k: float = valof: float { own x: float = 29.2; return x; };

            // array
            public array l[valof: int { own x: int = 0; return x; }:valof: int { own x: int = 1; return x; }]: float;

            // proc
            public proc m(a: float) {
                output valof: float { own x: float = 0.0; x = a; return x; };
            }

            // func
            public func n(a: int): float {
                valof: float { own x: float = 0.0; x = a + 0.6; return x; }
            }

            // const
            private const o: float = valof: float { own x: float = 29.7; return x; };

            // var
            private var p: float = valof: float { own x: float = 29.8; return x; };

            // array
            private array q[valof: int { own x: int = 0; return x; }:valof: int { own x: int = 1; return x; }]: float;

            // proc
            private proc r(a: float) {
                output valof: float { own x: float = 0.0; x = a; return x; };
            }

            // func
            private func s(a: int): float {
                valof: float { own x: float = 0.0; x = a + 0.93; return x; }
            }

            public proc t() {
                output this.o;
                output this.p;
                this.q[0] = 29.9;
                this.q[1] = 29.91;
                output this.q[0];
                output this.q[1];
                this.r(29.92);
                output this.s(29);
            }
        }
        var i: T = new T();

        output a;
        output b;
        output c;
        d[0] = 23;
        d[1] = 24;
        output d[0];
        output d[1];
        e(25);
        f(26);
        output g(28);
        output h(1);
        output i.j;
        output i.k;
        i.l[0] = 29.3;
        i.l[1] = 29.4;
        output i.l[0];
        output i.l[1];
        i.m(29.5);
        output i.n(29);
        i.t();        
    }

    // ref
    output ref valof: int { own x: int = 30; return x; }; 

    // array
    {
        var x: array of int = array[valof: int { own x: int = 0; return x; }:valof: int { own x: int = 1; return x; }]: int;
        x[0] = 31;
        output x[0];
    }

    // function
    output (valof: bool { own x: bool = true; return x; } ? add2 : add2)(valof: int { own x: int = 2; return x; }, valof: int { own x: int = 30; return x; });

    // if exp
    output valof: bool { own x: bool = true; return x; } ? valof: int { own x: int = 33; return x; } : valof: int { own x: int = 34; return x; };
    output valof: bool { own x: bool = false; return x; } ? valof: int { own x: int = 33; return x; } : valof: int { own x: int = 34; return x; };

    // valof
    output valof: int { own x: int = 36; return x; };

    // cont
    output cont valof: ref ref int { own x: int = 37; return ref ref x; };

    // array access
    c[valof: int { own x: int = 0; return x; }] = 38;
    c[valof: int { own x: int = 1; return x; }] = 39;
    output c[0];
    output c[1];

    // dot
    d.d1 = 40;
    output valof: record(d1: int) { own x: record(d1: int) = record(d1: int); x = d; return x; }.valof: int { own x: int = 1; x = d1; return x; };

    // not
    output !valof: bool { own x: bool = false; return x; } ? 41 : 1;

    // positive
    output +valof: int { own x: int = 42; return x; };

    // negative
    output -valof: int { own x: int = -43; return x; };

    // op
    output valof: int { own x: int = 40; return x; } * valof: int { own x: int = 3; return x; } + valof: int { own x: int = -40; return x; } - valof: int { own x: int = 36; return x; };
}
