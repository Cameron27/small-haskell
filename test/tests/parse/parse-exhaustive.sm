// true
// true
// true
/*
1
*/
/*
1
3
1
1
1
1
1
1
1
6
*/

program {
    const y: int = 1;
    var z: int = 1;
    own t: bool = true;
    array b[0:5]: int;
    record r(a: int, b: int, c: int);
    file f withbuffer fb: int;
    proc a(a: int, b: int) {
        output a + b;
    }
    rec proc x(a: int, b: int) {
        output a + b;
        x(a + b, b);
    }
    func x_9(a: int, b: int): int {
        a + b
    }
    rec func x(a: int, b: int): int {
        x(a + b, b)
    }
    class T {
        public const y: int = 1;
        public var z: int = 1;
        public array b[0:5]: int;
        public record r(a: int, b: int, c: int);
        public file f withbuffer fb: int;
        public proc a(a: int, b: int) {
            this.z = a + b;
            output this.z;
        }
        public func x_8(a: int, b: int): int {
            valof: int {
                this.z = a + b;
                output this.z;
                return this.z;
            }
        }
        private const y: int = 1;
        private var z: int = 1;
        private array b[0:5]: int;
        private record r(a: int, b: int, c: int);
        private file f withbuffer fb: int;
        private proc a(a: int, b: int) {
            this.z = a + b;
            output this.z;
        }
        private func x_8(a: int, b: int): int {
            valof: int {
                this.z = a + b;
                output this.z;
                return this.z;
            }
        }
        const y: int = 1;
        var z: int = 1;
        array b[0:5]: int;
        record r(a: int, b: int, c: int);
        file f withbuffer fb: int;
        proc a(a: int, b: int) {
            this.z = a + b;
            output this.z;
        }
        func x_8(a: int, b: int): int {
            valof: int {
                this.z = a + b;
                output this.z;
                return this.z;
            }
        }
    }
    z = y;
    output z;
    a(1, 2);
    if (t) {
        z = y;
    } else {
        z = y;
    }
    while (!t) {
        z = y;
    }
    repeat {
        z = y;
    } until (t)
    for (z = 1,5 while z == 5,1 step 2 until 10) {
        output y;
    }
    trap {
        output y;
        escapeto a;
a:
        b[2] = y;
b:
        b[2] = y;
    }
    with r do {
        a = 1;
        b = 2;
    }

    {
        const x: int = 1;
        const x23: int = 0x5F;
        const X_3: int = 0x5f;
        const x: int = 0X5F;
        const x: int = 0X5f;
        const x: int = 0o52;
        const x: int = 0O52;
        const x: bool = true;
        const x: bool = false;
        const x: float = 1.2;
        const x: float = 1.2e2;
        const x: float = 1.2E+2;
        const x: string = "";
        const x: string = "test";
        const x: string = "te\fst\r\nte\tst\xff\x78\x9Ee";
        const x: string = read;
        const x: string = x;
        const x: string = ref x;
        const x: array of int = array[1:5]: int;
        const x: record(a: int, b: int, c: int) = record(a: int, b: int, c: int);
        const x: int = x_9(5, 6);
        const x: int = true ? 5 : 1;
        const x: int = valof: int {
            return x;
        };
        const x: int = cont ref x;
        const x: int = b[2];
        const x: int = r.a;
        const x: T = new T();
        const y: int = x.z;
        const y: int = x.x_8(1, 5);
        const x: T = null;
        const x: bool = !false;
        const x: int = +1;
        const x: float = +1.1;
        const x: int = -1;
        const x: float = -1.1;
        const x: int = 1 * 2;
        const x: int = 1 / 2;
        const x: int = 1 % 2;
        const x: int = 1 + 2;
        const x: int = 1 - 2;
        const x: bool = 1 < 2;
        const x: bool = 1 <= 2;
        const x: bool = 1 > 2;
        const x: bool = 1 >= 2;
        const x: bool = 1 == 2;
        const x: bool = 1 != 2;
        const x: int = 1 & 2;
        const x: int = 1 ^ 2;
        const x: int = 1 | 2;
    }
}