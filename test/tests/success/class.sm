// true
// true
// true
/**/
/*
0
1
3
7
test
test1
test2
5
4
0
4
16
0
8
16
1
two
1
2
1
2
4
1
2
3
true
true
false
false
true
false
1
4
1
2
3
4
5
1
*/

program {
    {
        // Check all declatartion
        class Test {
            public const a: int = 0;
            public var b: int = 1;
            public array c[0:4]: int;
            public record d(da: int, db: string, dc: bool);
            public file e withbuffer f: string;
            public proc g(x: int, y: float) {
                output 5;
            }
            public func h(a: int, b: bool): int {
                b ? a : a * 2
            }
        }
        var test: Test = new Test();
        output test.a; // 0
        output test.b; // 1
        test.c[3] = 3;
        output test.c[3]; // 3
        test.d.da = 7;
        test.d.db = "test";
        output test.d.da; // 7
        output test.d.db; // test
        test.f = "test1";
        put(test.e);
        test.f = "test2";
        put(test.e);
        reset(test.e);
        output (test.f); // test1
        get(test.e);
        output (test.f); // test2
        test.g(1, 2.0); // 5
        output test.h(4, true); // 4
    }

    // Test null, this, recursive usage and func/proc calls
    {
        class Node {
            public var next: Node = null;
            public var val: int = 0;

            public proc add(i: int) {
                if (isNull(this.next)) {
                    this.next = new Node();
                    this.next.val = i;
                } else {
                    this.next.add(i);
                }
            }

            public func get(i: int): int {
                valof: int {
                    if (i == 0)
                        return this.val;
                    else
                        return this.next.get(i - 1);
                }
            }

            public proc remove(i: int) {
                if (i == 1) {
                    var temp: Node = this.next.next;
                    this.next = null;
                    this.next = temp;
                }
                else
                    this.remove(i - 1);
            }
        }

        var l: Node = new Node();
        var x: int = 1;
        while (x < 20) {
            l.add(cont x);
            x = x * 2;
        }
        output l.get(0); // 0
        output l.get(3); // 4
        output this.l.get(5); // 16

        l.remove(2);
        output l.get(0); // 0
        output l.get(3); // 8
        output this.l.get(4); // 16
    }

    // Test class name shadowing
    {
        class Test {
            public const x: int = 1;
        }
        var x: Test = new Test();

        {
            class Test {
                public const y: string = "two";
            }

            var y: Test = new Test();
            output x.x; // 1
            output y.y; // two
        }

        x = new Test();
    }

    // Test environment capturing
    {
        var a: int = 1;
        class Test {
            public var x: int = a;
        }

        var t1: Test = null;
        var t2: Test = null;

        t1 = new Test();
        a = 2;
        t2 = new Test();
        output t1.x; // 1
        output t2.x; // 2
    }

    // Test this capturing
    {
        class Test {
            public var a: int = 1;
            public proc p() {
                output this.a;
            }
        }
        const t: Test = new Test();
        proc run3(p: proc()) {
            p();
            t.a = 2;
            p();
            t.a = 4;
            p();
        }

        run3(t.p); // 1\n2\n4
    }

    // Test this restored
    {
        class Test1 {
            public var b: int = 2;

            public proc out() {
                output this.b;
            }
        }

        class Test2 {
            public var a: int = 1;
            public var t1: Test1 = new Test1();
            public var c: int = 3;

            public proc out() {
                output this.a;
                this.t1.out();
                output this.c;
            }
        }

        (new Test2()).out(); // 1\n2\n3
    }

    // Test isNull
    {
        class Test { }
        const a: Test = null;
        var b: Test = null;
        const c: Test = new Test();
        var d: Test = new Test();

        output isNull(a); // true
        output isNull(b); // true
        output isNull(c); // false
        output isNull(d); // false
        output isNull(null); // true
        output isNull(new Test()); // false
    }

    // Object as parameter
    {
        class Test {
            public var x: int = 1;
        }

        record a(test: Test);
        proc b(test: ref Test) {
            output test.x;
        }
        func c(test: ref Test): ref Test {
            valof: ref Test {
                test.x = 4;
                return ref test;
            }
        }

        a.test = new Test();
        b(a.test); // 1
        b(c(a.test)); // 4
    }

    // Object recursive types
    {
        var ii: int = 1;
        class Test {
            public var i: int = ii;
        }

        var a: ref Test = ref ref new Test();
        array b[1:2]: Test;
        record c(cc: Test);
        file d withbuffer e: Test;

        output (cont a).i; // 1

        ii = 2;
        b[1] = new Test();
        output b[1].i; // 2

        ii = 3;
        c.cc = new Test();
        output c.cc.i; // 3

        ii = 4;
        e = new Test();
        put(d);
        ii = 5;
        e = new Test();
        put(d);
        reset(d);
        output e.i; // 4
        get(d);
        output e.i; // 5
    }

    {
        class Test {
            public file f withbuffer f: int;
        }

        const t: Test = new Test();
        reset(t.f);
    }

    // Test recursive usage on rhs
    {
        class T{
            var x: int = 1;
            public var a: int = (new T()).x;
            public const b: int = (new T()).x;
            public array c[(new T()).x : (new T()).x]: int;
            public proc d(y: T) {
                output (new T()).x;
            }
            public func e(y: T): int {
                cont (new T()).x
            }
            
            private var f: int = (new T()).x;
            private const g: int = (new T()).x;
            private array h[(new T()).x : (new T()).x]: int;
            private proc i(y: T) {
                output (new T()).x;
            }
            private func j(y: T): int {
                cont (new T()).x
            }
        }
    }

    // Test return type restored
    {
        output valof: int {
            class T {
                public proc t() {
                    output 1;
                }
            }

            return 1;
        }; // 1
    }
}