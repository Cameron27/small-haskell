module Interpreter.Operations (evalOp) where

import Classes (Pretty (pretty), Typeable (typeSrt))
import Data.Bits (Bits (xor, (.&.), (.|.)))
import Interpreter.Helper (err)
import Interpreter.Types
  ( Cc,
    Dv (DBool, DDouble, DInt, DString),
    Ec,
    Rv (..),
  )
import Parser.Types (Opr (..))

evalOp :: Opr -> (Rv, Rv) -> Ec -> Cc
evalOp Mult (RInt a, RInt b) k = k (DInt $ a * b)
evalOp Mult (RDouble a, RDouble b) k = k (DDouble $ a * b)
evalOp Mult (RInt a, RDouble b) k = k (DDouble $ fromIntegral a * b)
evalOp Mult (RDouble a, RInt b) k = k (DDouble $ a * fromIntegral b)
evalOp Div (RInt a, RInt b) k = k (DInt $ a `div` b)
evalOp Div (RDouble a, RDouble b) k = k (DDouble $ a / b)
evalOp Div (RInt a, RDouble b) k = k (DDouble $ fromIntegral a / b)
evalOp Div (RDouble a, RInt b) k = k (DDouble $ a / fromIntegral b)
evalOp Mod (RInt a, RInt b) k = k (DInt $ a `mod` b)
evalOp Add (RInt a, RInt b) k = k (DInt $ a + b)
evalOp Add (RDouble a, RDouble b) k = k (DDouble $ a + b)
evalOp Add (RInt a, RDouble b) k = k (DDouble $ fromIntegral a + b)
evalOp Add (RDouble a, RInt b) k = k (DDouble $ a + fromIntegral b)
evalOp Add (RString a, RString b) k = k (DString $ a ++ b)
evalOp Sub (RInt a, RInt b) k = k (DInt $ a - b)
evalOp Sub (RDouble a, RDouble b) k = k (DDouble $ a - b)
evalOp Sub (RInt a, RDouble b) k = k (DDouble $ fromIntegral a - b)
evalOp Sub (RDouble a, RInt b) k = k (DDouble $ a - fromIntegral b)
evalOp Less (RInt a, RInt b) k = k (DBool $ a < b)
evalOp Less (RDouble a, RDouble b) k = k (DBool $ a < b)
evalOp Less (RInt a, RDouble b) k = k (DBool $ fromIntegral a < b)
evalOp Less (RDouble a, RInt b) k = k (DBool $ a < fromIntegral b)
evalOp LessEq (RInt a, RInt b) k = k (DBool $ a <= b)
evalOp LessEq (RDouble a, RDouble b) k = k (DBool $ a <= b)
evalOp LessEq (RInt a, RDouble b) k = k (DBool $ fromIntegral a <= b)
evalOp LessEq (RDouble a, RInt b) k = k (DBool $ a <= fromIntegral b)
evalOp Great (RInt a, RInt b) k = k (DBool $ a > b)
evalOp Great (RDouble a, RDouble b) k = k (DBool $ a > b)
evalOp Great (RInt a, RDouble b) k = k (DBool $ fromIntegral a > b)
evalOp Great (RDouble a, RInt b) k = k (DBool $ a > fromIntegral b)
evalOp GreatEq (RInt a, RInt b) k = k (DBool $ a >= b)
evalOp GreatEq (RDouble a, RDouble b) k = k (DBool $ a >= b)
evalOp GreatEq (RInt a, RDouble b) k = k (DBool $ fromIntegral a >= b)
evalOp GreatEq (RDouble a, RInt b) k = k (DBool $ a >= fromIntegral b)
evalOp Equal (RInt a, RInt b) k = k (DBool $ a == b)
evalOp Equal (RDouble a, RDouble b) k = k (DBool $ a == b)
evalOp Equal (RInt a, RDouble b) k = k (DBool $ fromIntegral a == b)
evalOp Equal (RDouble a, RInt b) k = k (DBool $ a == fromIntegral b)
evalOp Equal (RBool a, RBool b) k = k (DBool $ a == b)
evalOp Equal (RString a, RString b) k = k (DBool $ a == b)
evalOp NEqual (RInt a, RInt b) k = k (DBool $ a /= b)
evalOp NEqual (RDouble a, RDouble b) k = k (DBool $ a /= b)
evalOp NEqual (RInt a, RDouble b) k = k (DBool $ fromIntegral a /= b)
evalOp NEqual (RDouble a, RInt b) k = k (DBool $ a /= fromIntegral b)
evalOp NEqual (RBool a, RBool b) k = k (DBool $ a /= b)
evalOp NEqual (RString a, RString b) k = k (DBool $ a /= b)
evalOp And (RInt a, RInt b) k = k (DInt $ a .&. b)
evalOp And (RBool a, RBool b) k = k (DBool $ a && b)
evalOp Xor (RInt a, RInt b) k = k (DInt $ a `xor` b)
evalOp Xor (RBool a, RBool b) k = k (DBool $ a `xor` b)
evalOp Or (RInt a, RInt b) k = k (DInt $ a .|. b)
evalOp Or (RBool a, RBool b) k = k (DBool $ a || b)
evalOp o (a, b) _ = err $ "operation \"" ++ pretty o ++ "\" cannot be applied to types \"" ++ typeSrt a ++ "\" and \"" ++ typeSrt b ++ "\""